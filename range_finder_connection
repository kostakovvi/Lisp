;!!! install quicklisp & usocket 
(require :asdf)
(asdf:operate 'asdf:load-op :usocket)

(defvar *my-node-address* "192.168.208.152")
(defvar *my-port* 2351)

(defvar *locator-address* "192.168.208.110")
(defvar *locator-port* 2352)


(defun transform-rf (input-data)
  (let ((curr-list nil))
    (dotimes (i (floor (array-dimension input-data 0) 2))
      (push (+ (* (aref input-data (1+ (* 2 i))) 256) (aref input-data (* 2 i))) curr-list))
    (cdr (nreverse curr-list))))

; convert list of polar coords to cartesian ( X . Y )
(let ((sin-table (make-array '(360)))
	  (cos-table (make-array '(360))))
	  (dotimes (i 360)
		(setf (aref sin-table i) (sin (/ (* (1+ i) 3.1415927) 360)))
		(setf (aref cos-table i) (cos (/ (* (1+ i) 3.1415927) 360))))
(defun to-cartesian (points)
	(let ((cart-points nil))
		(dotimes (i 360)
			(push (cons (* (nth i points) (aref cos-table i)) (* (nth i points) (aref sin-table i))) cart-points))
		(nreverse cart-points))))

(defun socket-listener-function () 
  (let ((socket-listener (usocket:socket-connect 
			  nil nil :protocol :datagram :local-host *my-node-address* :local-port *my-port*))
		(sock-sender (usocket:socket-connect *locator-address* *locator-port* :protocol :datagram)))
    (loop (multiple-value-bind (received-data data-length sender-ip sender-port) (usocket:socket-receive socket-listener nil 722)
			       ;(format t "Current data are: ~A ~A ~A ~A~&" (to-cartesian (transform-rf received-data)) data-length sender-ip sender-port)
				   (setf *ranges* (transform-rf received-data))
				   (let ((arr (format nil "~A" (zones-info))))
					(usocket:socket-send sock-sender arr (length  arr)))))))

--------------------------------------------
(defun server-main()
;; start server threads
(main-socket-listener 'start)
(do ((command-string
 	(string upcase (read-line))
	(string upcase (read-line))))
    ((string-equal command-string "QUIT")
   0)
   (cond
    ((string-equal command-string "INFO")
     (format t "~A" *ranges*))
   ( t (format t "Unknown command: ~A~&" command-string)))))


--------------------------------------
(main-socket-listener 'start)
---------------------------------------


(let ((thread-listener nil)) ;;; !!! add error ADDRINUSE processing
  (defun main-socket-listener (cmd)
    (cond ((eq cmd 'close) (sb-thread:terminate-thread thread-listener))
	  ((eq cmd 'start)  
	      (setq thread-listener
		 (sb-thread:make-thread #'socket-listener-function :name "thread-listener")))
	  (t nil))))

--------------------------------------------------------------------
(defparameter *ranges* ())
(setf *ranges* '(1024 1025 1044 1044 1044 1054 906 905 904 903 905 906 907 1044 1033 1035 1056 888 888 886 885 777 655 484 1044 1034 1045 1099 1111 1121 900 900))
*ranges*
(defparameter *robotwidth* ())
(setf *robotwidth* '100)
*robotwidth*
(defparameter *minrange* ())
(setf *minrange* '1000)
*minrange*
(defparameter *savezone* ())
*savezone*
(defparameter *dangerzone* ())
*dangerzone*

-----------------------------------------------------
(defun zones-info (*ranges* *robotwidth* *minrange*)
(loop for i in *ranges* do (print i))
(format t "Список расстояний: ~A значения через каждые 0.5 градусов~&" *ranges*)
(cos (/ (* (- ecornersz scornersz) 3.1415927) 180)))
(isqrt (- (+ (* srange srange) (* erange erange)) (* 2 srange erange (cos (/ (* (- ecornersz scornersz) 3.1415927) 180))))))
(isqrt (floor (- (+ (* 2 2) (* 4 4)) (* 2 2 4 (cos (/ (* (- 2 0.5) 3.1415927) 180)) ) )))
----------------------------------------------------
(defun zones-info ()
( let ((counter 0) (corner 0) (flag ) (output-result) (scornersz 0.0) (scornerdz 0.0) (ecornersz 0.0) (ecornerdz 0.0) (srange 0) (erange 0) (widthzone ))
(defparameter *savezone* ())
(defparameter *dangerzone* ())
(format t "Размер робота: ~A ~&" *robotwidth*)
(format t "Минимальная допустимая дистанция до препятствия: ~A ~&" *minrange*)
(loop for i in *ranges* do 
( progn
	(setf counter (+ counter 1))
	(setf corner (* counter 0.5))
	(cond ( (null i) nil )
	      ( (>= i *minrange*) (cond ( (null flag) (setf srange i))
                                        ( (eq flag 0) (setf *dangerzone* (acons scornerdz (list ecornerdz) *dangerzone*))(format t "Опасная зона: ~A ~&" *dangerzone*))
				  )				  
				  (setf flag 1))
	      ( (< i *minrange*) 
  				  (cond ( (null flag) (progn (setf srange i)(setf ecornerdz corner)(setf scornersz corner)))
                                        ( (eq flag 0) (progn
							(setf ecornerdz corner) 
							(setf srange i) 
							(setf scornersz corner) ))
					( (eq flag 1) (progn
							(setf ecornersz corner) 
							(setf erange i)(format t "Конечное расстояние безопасной зоны: ~A ~&" erange) 
							(setf scornerdz corner)
							
							(setf ecornerdz corner)                                                          
							(setf widthzone (isqrt (floor (- (+ (* srange srange) (* erange erange)) (* 2 srange erange (cos (/ (* (- ecornersz scornersz) 3.1415927) 180))))))) 							
							(if (> widthzone *robotwidth*) (progn 
								(setf *savezone* (acons scornersz (list ecornersz) *savezone*))(format t "БезОпасная зона: ~A ~&" *savezone*))	 
 										       (progn
								(setf *dangerzone* (acons scornersz (list ecornersz) *dangerzone*))(format t "Опасная зона: ~A ~&" *dangerzone*))
						        )
						      ))
				  )
				  (setf flag 0))
	)
	(format t "Расстояние: ~A соответствует градусу: ~A флаг выставлен в:~A~&" i corner flag)))
(if (eq flag 0)
	(setf *dangerzone* (acons ecornersz (list corner) *dangerzone*))
	(setf *dangerzone* (acons ecornerdz (list corner) *dangerzone*)))
(setf *savezone* (reverse *savezone*))(format t "Безопасная зона: ~A ~&" *savezone*)
(format t "Опасная зона: ~A ~&" (reverse *dangerzone*))
(setf *dangerzone* (update-zone (reverse *dangerzone*)))(format t "Опасная зона: ~A ~&" *dangerzone*)
(setf output-result (list *dangerzone* *savezone*))
))


(zones-info)

(setf *ranges* '( 1060 1070 ))
(setf *ranges* '(900 888 1024 1025 1044 1005 1060 1070 1060 899 999))
(setf *ranges* '(900  1024 1025 1044 1005 1060 1070 999))
(setf *ranges* '(900  1024 1025 1044 1005 1060 1070 1080))
(setf *ranges* '(989 1024 1025 1044 1044 1044 1054 1056 1055 1054 1044 1044 1044 906 905 904 903 905 906 907 1044 1033 1035 1056 888 888 886 885 777 655 484 1044 1034 1045 1099 1111 1121 900 900))

----------------------------------------------------ф-ция преобразовывает опасную зону

   (defun update-zone (l)	
      (cond ( (null l) nil )
            ( (null (cdr l)) l )
            (  t (progn 		
		(if (eq (cadr(car l)) (caar(cdr l)))
		(progn
		(update-zone (reverse (append (nbutlast (reverse l) 2) (list(delete (caar(cdr l)) (nconc (car l) (cadr l)))))) 			) )	     
		(cons (car l) (update-zone (cdr l))) ) ) )
      )
   ) 
-------------------------------------------конец ф-ции преобразов.
(defparameter *x* ())
(setf *x* '((1 2) (2 3) (4 5) (6 7)))
(list(delete (caar(cdr *x*)) (nconc (car *x*) (cadr *x*))))

(reverse (append (nbutlast (reverse *x*) 2) (list(delete (caar(cdr *x*)) (nconc (car *x*) (cadr *x*))))))
(update-zone '((1 2) (2 3) (4 5) (6 7)))

---------------------------------------------вспомогательные функции для корректора

(defun watch-f (x lst)
 (cond ( (null lst) nil )
	    ( (equal x 360.5) (list '(10000.0 10000.0)) )
            (  (null (assoc x lst)) (watch-f (+ x 0.5) lst) ) 	    
            (  t  (assoc x lst) )
      )
)

(defun watch-b (x lst)
 (cond ( (null lst) nil )
	    ( (equal x -0.5) (list '(-10000.0 -10000.0)) )
            (  (null (rassoc1 x lst)) (watch-b (- x 0.5) lst) ) 	    
            (  t  (rassoc1 x lst) )
      )
)

(defun watch-s1 (x lst)
 (cond ( (null lst) nil )
	    ( (equal x -0.5) (list '(-10000.0 -10000.0)) )
            (  (null (assoc x lst)) (watch-s1 (- x 0.5) lst) ) 	    
            (  t  (assoc x lst) )
      )
)

(defun watch-s2 (x lst)
 (cond ( (null lst) nil )
	    ( (equal x 360.5) (list '(10000.0 10000.0)) )
            (  (null (rassoc1 x lst)) (watch-s2 (+ x 0.5) lst) ) 	    
            (  t  (rassoc1 x lst) )
      )
)

(DEFUN RASSOC1 (DATA ALIST)
      (COND ( (NULL ALIST) NIL )
            ( (EQUAL (CAR(CDAR ALIST)) DATA) (CAR ALIST) )          
            (  T  (RASSOC1 DATA (CDR ALIST)) )
      )
   )
------------------------------------------------------------------------конец вспомог. ф-ций
(values-list (list a b c)) == (values a b c)
(nth-value 0 (values 'a 'b)) =>  A
(nth-value 8 (values-list *ranges*)) 
-------------------------------------------------------------функция корректор
(defun corrector(x)
(let ((r (+ (floor (/(*(acos (/ (- (* *minrange* *minrange* 2) (* (/ *robotwidth* 2) (/ *robotwidth* 2))) (* *minrange* *minrange* 2))) 180) 3.1415927)) 0.5)))
(if (eq (watch-s1 (* x 0.5) *savezone*) (watch-s2 (* x 0.5) *savezone*) ) 
(progn
	(format t "БезОпасная зона: ~A ~A~&" *savezone* r)
	(watch-s1 (* x 0.5) *savezone*)
	(cond ( (< (- (* x 0.5) (car (watch-s1 (* x 0.5) *savezone*))) r) (format t "Направление: LEFT ~A" (- (+ (car (watch-s1 (* x 0.5) *savezone*)) r) (* x 0.5) )))
              ( (< (- (cadr (watch-s1 (* x 0.5) *savezone*)) (* x 0.5)) r) (format t "Направление: RIGHT ~A" (- (+ (* x 0.5) r) (cadr (watch-s1 (* x 0.5) *savezone*)) )))	     
	      ( t (format t "Корректировка не требуется") )	
	)
)
(progn
(format t "Опасная зона: ~A ~&" *dangerzone*)
(if (< (- (car (watch-f (* x 0.5) *savezone*)) (* x 0.5) ) (- (* x 0.5) (cadr (watch-b (* x 0.5) *savezone*)) )) 	
	(format t "Направление: LEFT ~A" (- (+ (car (watch-f (* x 0.5) *savezone*)) r) (* x 0.5)) )	
	(format t "Направление: RIGHT ~A"  (- (* x 0.5) (- (cadr (watch-b (* x 0.5) *savezone*)) r)) )
	) ) )
))

(corrector '10)
--------------------------------------------------------------------конец ф-ции корректора
(if (> (nth-value  x (values-list *ranges*)) *minrange*)
(eq (watch-s1 (* ( - x 1) 0.5) *savezone*) (watch-s2 (* ( - x 1) 0.5) *savezone*) )
(- (car (watch-f (* ( - x 1) 0.5) *savezone*)) (* ( - x 1) 0.5) )
(- (* ( - x 1) 0.5) (cadr (watch-b (* ( - x 1) 0.5) *savezone*)) )
(+ (floor (/(*(acos 0) 180) 3.1415927)) 0.5)
(* *minrange* *minrange* 2)
(acos (/ (- (* *minrange* *minrange* 2) (* (/ *robotwidth* 2) (/ *robotwidth* 2))) (* *minrange* *minrange* 2)))
(+ (floor (/(*(acos (/ (- (* *minrange* *minrange* 2) (* (/ *robotwidth* 2) (/ *robotwidth* 2))) (* *minrange* *minrange* 2))) 180) 3.1415927)) 0.5)
